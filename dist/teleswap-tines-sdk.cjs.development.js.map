{"version":3,"file":"teleswap-tines-sdk.cjs.development.js","sources":["../src/Utils.ts","../src/PrimaryPools.ts","../src/CLPool.ts","../src/StableSwapPool.ts","../src/Graph.ts","../src/MultiRouter.ts","../src/deprecated/MultiRouterTypes.ts","../src/deprecated/MultiRouterMath.ts"],"sourcesContent":["import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport function ASSERT(f: () => boolean, t?: string) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!f() && t) console.error(t);\n    }\n  }\n\nlet DEBUG_MODE = false\nexport function DEBUG(f: () => any) {\n  if (DEBUG_MODE) f()\n}\nexport function DEBUG_MODE_ON(on: boolean) {\n  DEBUG_MODE = on\n}\n  \n  export function closeValues(a: number, b: number, accuracy: number): boolean {\n    if (accuracy === 0) return a === b;\n    if (a < 1 / accuracy) return Math.abs(a - b) <= 10;\n    return Math.abs(a / b - 1) < accuracy;\n  }\n  \n  export function calcSquareEquation(\n    a: number,\n    b: number,\n    c: number\n  ): [number, number] {\n    const D = b * b - 4 * a * c;\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\n    const sqrtD = Math.sqrt(D);\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\n  }\n  \n  // returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n  // hint - approximation of x to spead up the algorithm\n  // f assumed to be continues monotone growth function defined everywhere\n  export function revertPositive(\n    f: (x: number) => number,\n    out: number,\n    hint = 1\n  ) {\n    try {\n      if (out <= f(0)) return 0;\n      let min, max;\n      if (f(hint) > out) {\n        min = hint / 2;\n        while (f(min) > out) min /= 2;\n        max = min * 2;\n      } else {\n        max = hint * 2;\n        while (f(max) < out) max *= 2;\n        min = max / 2;\n      }\n  \n      while (max / min - 1 > 1e-4) {\n        const x0: number = (min + max) / 2;\n        const y0 = f(x0);\n        if (out === y0) return x0;\n        if (out < y0) max = x0;\n        else min = x0;\n      }\n      return (min + max) / 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n  \n  export function getBigNumber(\n    value: number\n  ): BigNumber {\n    const v = Math.abs(value)\n    if (v < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value));\n  \n    const exp = Math.floor(Math.log(v) / Math.LN2);\n    console.assert(exp >= 51, \"Internal Error 314\");\n    const shift = exp - 51;\n    const mant = Math.round(v / Math.pow(2, shift));\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\n    return value > 0 ? res : res.mul(-1);\n  }\n  ","import { BigNumber } from '@ethersproject/bignumber'\nimport { getBigNumber, revertPositive } from './Utils'\n\nexport const TYPICAL_SWAP_GAS_COST = 60_000\nexport const TYPICAL_MINIMAL_LIQUIDITY = 1000\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport abstract class RPool {\n  readonly address: string\n  readonly token0: RToken\n  readonly token1: RToken\n  readonly fee: number\n  reserve0: BigNumber\n  reserve1: BigNumber\n  readonly minLiquidity: number\n  readonly swapGasCost: number\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    minLiquidity = TYPICAL_MINIMAL_LIQUIDITY,\n    swapGasCost = TYPICAL_SWAP_GAS_COST\n  ) {\n    this.address = address\n    ;(this.token0 = token0), (this.token1 = token1)\n    this.fee = fee\n    this.minLiquidity = minLiquidity\n    this.swapGasCost = swapGasCost\n    this.reserve0 = reserve0\n    this.reserve1 = reserve1\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  // Returns [<output amount>, <gas consumption estimation>]\n  abstract calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number}\n  abstract calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number}\n  abstract calcCurrentPriceWithoutFee(direction: boolean): number\n  // abstract calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number;\n  // abstract calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint: number): number;\n}\n\nexport class ConstantProductRPool extends RPool {\n  reserve0Number: number\n  reserve1Number: number\n\n  constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.reserve0Number = parseInt(reserve0.toString())\n    this.reserve1Number = parseInt(reserve1.toString())\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.reserve0 = res0\n    this.reserve0Number = parseInt(res0.toString())\n    this.reserve1 = res1\n    this.reserve1Number = parseInt(res1.toString())\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    return {out: (y * amountIn) / (x / (1 - this.fee) + amountIn), gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    if ((y-amountOut) < this.minLiquidity)  // not possible swap\n      return {inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost}\n\n    let input = (x * amountOut) / (1 - this.fee) / (y - amountOut)\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return (y * xf) / (xf + amountIn) / (xf + amountIn)\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const x = direction ? this.reserve0Number : this.reserve1Number\n    const y = direction ? this.reserve1Number : this.reserve0Number\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const xf = x / oneMinusFee\n    return Math.sqrt(y * xf * price) - xf // TODO: or y*xf/price ???\n  }\n\n  getLiquidity() {\n    return Math.sqrt(this.reserve0Number * this.reserve1Number)\n  }\n}\n\nexport class HybridRPool extends RPool {\n  readonly A: number\n  readonly A_PRECISION = 100\n  D: BigNumber // set it to 0 if reserves are changed !!\n\n  constructor(\n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    A: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber\n  ) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.A = A\n    this.D = BigNumber.from(0)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.D = BigNumber.from(0)\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  computeLiquidity(): BigNumber {\n    if (!this.D.eq(0)) return this.D // already calculated\n\n    const r0 = this.reserve0\n    const r1 = this.reserve1\n\n    if (r0.isZero() && r1.isZero()) return BigNumber.from(0)\n\n    const s = r0.add(r1)\n    const nA = BigNumber.from(this.A * 2)\n    let prevD\n    let D = s\n    for (let i = 0; i < 256; i++) {\n      const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n      prevD = D\n      D = nA\n        .mul(s)\n        .div(this.A_PRECISION)\n        .add(dP.mul(2))\n        .mul(D)\n        .div(nA.div(this.A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n      if (D.sub(prevD).abs().lte(1)) {\n        break\n      }\n    }\n    this.D = D\n    return D\n  }\n\n  computeY(x: BigNumber): BigNumber {\n    const D = this.computeLiquidity()\n\n    const nA = this.A * 2\n\n    let c = D.mul(D)\n      .div(x.mul(2))\n      .mul(D)\n      .div((nA * 2) / this.A_PRECISION)\n    let b = D.mul(this.A_PRECISION).div(nA).add(x)\n\n    let yPrev\n    let y = D\n    for (let i = 0; i < 256; i++) {\n      yPrev = y\n\n      y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n      if (y.sub(yPrev).abs().lte(1)) {\n        break\n      }\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    const xNewBN = xBN.add(getBigNumber(amountIn * (1 - this.fee)))\n    const yNewBN = this.computeY(xNewBN)\n    const dy = parseInt(yBN.sub(yNewBN).toString())\n\n    return {out: dy, gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const yBN = direction ? this.reserve1 : this.reserve0\n    let yNewBN = yBN.sub(getBigNumber(amountOut))\n    if (yNewBN.lt(1))\n      // lack of precision\n      yNewBN = BigNumber.from(1)\n\n    const xNewBN = this.computeY(yNewBN)\n    let input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - this.fee))\n\n    //if (input < 1) input = 1\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    return this.calcPrice(0, direction, false)\n  }\n\n  calcPrice(amountIn: number, direction: boolean, takeFeeIntoAccount: boolean): number {\n    const xBN = direction ? this.reserve0 : this.reserve1\n    const x = parseInt(xBN.toString())\n    const oneMinusFee = takeFeeIntoAccount ? 1 - this.fee : 1\n    const D = parseInt(this.computeLiquidity().toString())\n    const A = this.A / this.A_PRECISION\n    const xI = x + amountIn\n    const b = 4 * A * xI + D - 4 * A * D\n    const ac4 = (D * D * D) / xI\n    const Ds = Math.sqrt(b * b + 4 * A * ac4)\n    const res = (0.5 - (2 * b - ac4 / xI) / Ds / 4) * oneMinusFee\n    return res\n  }\n\n  calcInputByPrice(price: number, direction: boolean, takeFeeIntoAccount: boolean, hint = 1): number {\n    // TODO:  (x:number) => this.calcPrice(x, !direction, takeFeeIntoAccount)  ???\n    return revertPositive((x: number) => 1 / this.calcPrice(x, direction, takeFeeIntoAccount), price, hint)\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, RToken, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST } from \"./PrimaryPools\";\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\n\nexport interface CLTick {\n  index: number\n  DLiquidity: number\n}\n\nexport class CLRPool extends RPool {\n  tickSpacing: number\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n\n  constructor(      \n    address: string,\n    token0: RToken,\n    token1: RToken,\n    fee: number,\n    tickSpacing: number,\n    reserve0: BigNumber,\n    reserve1: BigNumber,\n    liquidity: number,\n    sqrtPrice: number,\n    nearestTick: number,\n    ticks: CLTick[]\n  ) {\n    super(      \n      address,\n      token0,\n      token1,\n      fee,\n      reserve0,\n      reserve1,\n      TYPICAL_MINIMAL_LIQUIDITY,\n      TYPICAL_SWAP_GAS_COST,\n    )\n    this.tickSpacing = tickSpacing\n    this.liquidity = liquidity\n    this.sqrtPrice = sqrtPrice\n    this.nearestTick = nearestTick\n    this.ticks = ticks\n    if (this.ticks.length === 0) {\n      this.ticks.push({ index: CL_MIN_TICK, DLiquidity: 0 })\n      this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n    }\n    if (this.ticks[0].index > CL_MIN_TICK) this.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n    if (this.ticks[this.ticks.length - 1].index < CL_MAX_TICK) this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let outAmount = 0\n    let input = amountIn\n  \n    while (input > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {out: outAmount, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n      let output = 0\n  \n      if (direction) {\n        const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n        //console.log('input, maxDx', input, maxDx);\n  \n        if (input <= maxDx) {\n          output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n          input = 0\n        } else {\n          output = currentLiquidity * (currentPrice - nextTickPrice)\n          currentPrice = nextTickPrice\n          input -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (input <= maxDy) {\n          output = input / currentPrice / (currentPrice + input / currentLiquidity)\n          input = 0\n        } else {\n          output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          input -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n  \n      outAmount += output * (1 - this.fee)\n      //console.log('out', outAmount);\n    }\n  \n    return {out: outAmount, gasSpent: this.swapGasCost}  // TODO: more accurate gas prediction \n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {  \n    let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1\n    let currentPrice = this.sqrtPrice\n    let currentLiquidity = this.liquidity\n    let input = 0\n    let outBeforeFee = amountOut/(1-this.fee)    \n\n    while (outBeforeFee > 0) {\n      if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\n        return {inp: input, gasSpent: this.swapGasCost}\n  \n      const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index))\n      // console.log('L, P, tick, nextP', currentLiquidity,\n      //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\n  \n      if (direction) {\n        const maxDy = currentLiquidity * (currentPrice - nextTickPrice)\n        //console.log('input, maxDy', input, maxDy);\n        if (outBeforeFee <= maxDy) {\n          input += outBeforeFee / currentPrice / (currentPrice - outBeforeFee / currentLiquidity)\n          outBeforeFee = 0\n        } else {\n          input += (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDy\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross--\n        }\n      } else {\n        const maxDx = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        //console.log('outBeforeFee, maxDx', outBeforeFee, maxDx);\n  \n        if (outBeforeFee <= maxDx) {\n          input += (currentLiquidity * currentPrice * outBeforeFee) / (currentLiquidity / currentPrice - outBeforeFee)\n          outBeforeFee = 0\n        } else {\n          input += currentLiquidity * (nextTickPrice - currentPrice)\n          currentPrice = nextTickPrice\n          outBeforeFee -= maxDx\n          if ( (this.ticks[nextTickToCross].index/this.tickSpacing) % 2 === 0) {\n            currentLiquidity += this.ticks[nextTickToCross].DLiquidity\n          } else {\n            currentLiquidity -= this.ticks[nextTickToCross].DLiquidity\n          }\n          nextTickToCross++\n        }\n      }\n    }\n  \n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n  \n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const p = this.sqrtPrice*this.sqrtPrice\n    return direction ? p : 1/p\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, RToken} from \"./PrimaryPools\";\nimport { getBigNumber } from './Utils'\n\n// xy(xx+yy) = k\nexport class StableSwapRPool extends RPool {\n  k: BigNumber // set it to 0 if reserves are changed !!\n\n  constructor(address: string, token0: RToken, token1: RToken, fee: number, reserve0: BigNumber, reserve1: BigNumber) {\n    super(address, token0, token1, fee, reserve0, reserve1)\n    this.k = BigNumber.from(0)\n  }\n\n  updateReserves(res0: BigNumber, res1: BigNumber) {\n    this.k = BigNumber.from(0)\n    this.reserve0 = res0\n    this.reserve1 = res1\n  }\n\n  computeK(): BigNumber {\n    if (this.k.isZero()) {\n      const x = this.reserve0\n      const y = this.reserve1\n      this.k = x.mul(y).mul( x.mul(x).add(y.mul(y)) )\n    }\n    return this.k\n  }\n\n  computeY(x: BigNumber, yHint: BigNumber): BigNumber {\n    const k = this.computeK()\n    const x2 = x.shl(1)\n    const x3 = x.mul(3)\n    const xCube = x.mul(x).mul(x)\n    let yPrev = yHint, y = yHint\n    for (let i = 0; i < 255; ++i) {\n      const ySquare = y.mul(y)\n      const yCube = ySquare.mul(y)\n      y = yCube.mul(x2).add(k).div( ySquare.mul(x3).add(xCube) )\n      if (y.sub(yPrev).abs().lte(1)) break\n      yPrev = y\n    }\n    return y\n  }\n\n  calcOutByIn(amountIn: number, direction: boolean): {out: number, gasSpent: number} {\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    const xNew = x.add(getBigNumber(Math.floor(amountIn * (1 - this.fee))))\n    const yNew = this.computeY(xNew, y)\n    const out = parseInt(y.sub(yNew).toString()) - 1    // with precision loss compensation\n    return {out: Math.max(out, 0), gasSpent: this.swapGasCost}\n  }\n\n  calcInByOut(amountOut: number, direction: boolean): {inp: number, gasSpent: number} {\n    const x = direction ? this.reserve0 : this.reserve1\n    const y = direction ? this.reserve1 : this.reserve0\n    let yNew = y.sub(getBigNumber(Math.ceil(amountOut)))\n    if (yNew.lt(this.minLiquidity))  // not possible swap\n      return {inp: Number.POSITIVE_INFINITY, gasSpent: this.swapGasCost}\n\n    const xNew = this.computeY(yNew, x)\n    let input = Math.round(parseInt(xNew.sub(x).toString()) / (1 - this.fee)) + 1  // with precision loss compensation\n    return {inp: input, gasSpent: this.swapGasCost}\n  }\n\n  calcCurrentPriceWithoutFee(direction: boolean): number {\n    const calcDirection = this.reserve0.gt(this.reserve1)\n    const xBN = calcDirection ? this.reserve0 : this.reserve1\n    // TODO: make x = max(x, y)\n    const x = parseInt(xBN.toString())\n    const k = parseInt(this.computeK().toString())\n    const q = k/x/2\n    const qD = -q/x                           // devivative of q\n    const Q = Math.pow(x, 6)/27 + q*q\n    const QD = 6*Math.pow(x, 5)/27 + 2*q*qD   // derivative of Q\n    const sqrtQ = Math.sqrt(Q)\n    const sqrtQD = 1/2/sqrtQ*QD               // derivative of sqrtQ\n    const a = sqrtQ + q\n    const aD = sqrtQD + qD\n    const b = sqrtQ - q\n    const bD = sqrtQD - qD\n    const a3 = Math.pow(a, 1/3)\n    const a3D = 1/3*a3/a*aD\n    const b3 = Math.pow(b, 1/3)\n    const b3D = 1/3*b3/b*bD\n    const yD = a3D - b3D\n\n    // For testing\n    // const yBN = calcDirection ? this.reserve1 : this.reserve0\n    // const y = parseInt(yBN.toString())\n    // const yC= a3-b3\n    // console.assert(Math.abs(yC/y - 1) < 1e-8)\n    \n    return calcDirection == direction ? -yD : -1/yD\n  }\n\n}","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { RPool, RToken } from \"./PrimaryPools\";\nimport {ASSERT, getBigNumber, closeValues, DEBUG} from \"./Utils\";\n\n// Routing info about each one swap\nexport interface RouteLeg {\n  poolAddress: string       // which pool use for swap\n  poolFee: number\n\n  tokenFrom: RToken         // from what token to swap\n  tokenTo: RToken           // to what token \n\n  assumedAmountIn: number   // assumed number of input token for swapping\n  assumedAmountOut: number  // assumed number of output token after swapping\n\n  swapPortion: number       // for router contract\n  absolutePortion: number   // to depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = \"Success\",\n  NoWay = \"NoWay\",\n  Partial = \"Partial\",\n}\n\nexport interface MultiRoute {\n  status: RouteStatus;\n  fromToken: RToken;\n  toToken: RToken;\n  primaryPrice?: number;\n  swapPrice?: number;\n  priceImpact?: number;\n  amountIn: number;\n  amountInBN: BigNumber;\n  amountOut: number;\n  amountOutBN: BigNumber;\n  legs: RouteLeg[];\n  gasSpent: number;\n  totalAmountOut: number;\n  totalAmountOutBN: BigNumber;\n}\n\nexport class Edge {\n  pool: RPool;\n  vert0: Vertice;\n  vert1: Vertice;\n\n  canBeUsed: boolean;\n  direction: boolean;\n  amountInPrevious: number;   // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number;  // How many liquidity were passed from vert0 to vert1\n  spentGas: number            // How much gas was spent for this edge\n  spentGasNew: number         //  How much gas was will be spent for this edge\n  bestEdgeIncome: number;     // debug data\n\n\n  constructor(p: RPool, v0: Vertice, v1: Vertice) {\n    this.pool = p;\n    this.vert0 = v0;\n    this.vert1 = v1;\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  cleanTmpData() {\n    this.amountInPrevious = 0;\n    this.amountOutPrevious = 0;\n    this.canBeUsed = true;\n    this.direction = true;\n    this.spentGas = 0;\n    this.spentGasNew = 0;\n    this.bestEdgeIncome = 0;\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number): {out: number, gasSpent: number} {\n    let res, gas;\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious - amountIn, true)\n          res = this.amountInPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountOutPrevious, false)\n          res = out + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountOutPrevious + amountIn, false)\n        res = out - this.amountInPrevious;\n        gas = gasSpent\n      }\n    } else {\n      if (this.direction) {\n        const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious + amountIn, true)\n        res = out - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountIn < this.amountInPrevious) {\n          const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious - amountIn, false)\n          res = this.amountOutPrevious - inp\n          gas = gasSpent\n        } else {\n          const {out, gasSpent} = this.pool.calcOutByIn(amountIn - this.amountInPrevious, true)\n          res = out + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {out: res, gasSpent: gas - this.spentGas};\n  }\n\n  calcInput(v: Vertice, amountOut: number): {inp: number, gasSpent: number}  {\n    let res, gas;\n    if (v === this.vert1) {\n      if (!this.direction) {\n        if (amountOut < this.amountOutPrevious) {\n          const {out, gasSpent}  = this.pool.calcOutByIn(this.amountOutPrevious - amountOut, false)\n          res = this.amountInPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountOutPrevious, true)\n          res = inp + this.amountInPrevious\n          gas = gasSpent\n        }\n      } else {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountOutPrevious + amountOut, true)\n        res = inp - this.amountInPrevious\n        gas = gasSpent\n      }\n    } else {\n      if (!this.direction) {\n        const {inp, gasSpent} = this.pool.calcInByOut(this.amountInPrevious + amountOut, false)\n        res = inp - this.amountOutPrevious\n        gas = gasSpent\n      } else {\n        if (amountOut < this.amountInPrevious) {\n          const {out, gasSpent} = this.pool.calcOutByIn(this.amountInPrevious - amountOut, true)\n          res = this.amountOutPrevious - out\n          gas = gasSpent\n        } else {\n          const {inp, gasSpent} = this.pool.calcInByOut(amountOut - this.amountInPrevious, false)\n          res = inp + this.amountOutPrevious\n          gas = gasSpent\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return {inp: res, gasSpent: gas - this.spentGas};\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.pool.minLiquidity;\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.pool.minLiquidity;\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.pool.minLiquidity;\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.pool.minLiquidity;\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = this.pool.calcOutByIn(amountInNew, true).out;\n      const res = closeValues(amountOutNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-1 !!\",\n          amountOutNew,\n          calc,\n          Math.abs(calc / amountOutNew - 1)\n        );\n      return res;\n    } else {\n      const calc = this.pool.calcOutByIn(amountOutNew, false).out;\n      const res = closeValues(amountInNew, calc, 1e-6);\n      if (!res)\n        console.log(\n          \"Err 225-2!!\",\n          amountInNew,\n          calc,\n          Math.abs(calc / amountInNew - 1)\n        );\n      return res;\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error(\"Error 221\");\n    this.spentGas = this.spentGasNew\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(\n          this.amountOutPrevious,\n          this.pool.calcOutByIn(this.amountInPrevious, this.direction).out,\n          1e-6\n        );\n      else {\n        return closeValues(\n          this.amountInPrevious,\n          this.pool.calcOutByIn(this.amountOutPrevious, this.direction).out,\n          1e-6\n        );\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  cleanTmpData() {\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n\n  getOutputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === this)) return false\n      return true\n    })\n  }\n\n  getInputEdges(): Edge[] {\n    return this.edges.filter((e) => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === this)) return false\n      return true\n    })\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<string, Vertice>\n\n  constructor(pools: RPool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = [];\n    this.edges = [];\n    this.tokens = new Map();\n    pools.forEach((p) => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken.address)\n    if (baseVert) {\n      this.setPricesStable(baseVert, 1, gasPrice)\n    }\n  }\n\n  cleanTmpData() {\n    this.edges.forEach(e => e.cleanTmpData())\n    this.vertices.forEach(v => v.cleanTmpData())\n  }\n\n  // Set prices using greedy algorithm\n  setPricesStable(from: Vertice, price: number, gasPrice: number) {\n    this.vertices.forEach(v => v.price = 0) // initialization\n    from.price = price\n    from.gasPrice = gasPrice\n    \n    const edgeValues = new Map<Edge, number>()\n    const value = (e: Edge): number => edgeValues.get(e) as number\n    \n    function addVertice(v: Vertice) {\n      const newEdges = v.edges.filter(e => v.getNeibour(e)?.price == 0)\n      newEdges.forEach(e => edgeValues.set(e, v.price*parseInt(e.reserve(v).toString())) )\n      newEdges.sort((e1, e2) => value(e1) - value(e2))\n      const res: Edge[] = []\n      while (nextEdges.length && newEdges.length) {\n        if (value(nextEdges[0]) < value(newEdges[0])) res.push(nextEdges.shift() as Edge)  \n        else res.push(newEdges.shift() as Edge)\n      }\n      nextEdges = [...res, ...nextEdges, ...newEdges]\n    }\n    \n    let nextEdges: Edge[] = []\n    addVertice(from)\n    while (nextEdges.length > 0) {\n      const bestEdge = nextEdges.pop() as Edge\n      const [vFrom, vTo] = bestEdge.vert1.price !== 0\n        ? [bestEdge.vert1, bestEdge.vert0] : [bestEdge.vert0, bestEdge.vert1]\n      if (vTo.price !== 0) continue\n      let p = bestEdge.pool.calcCurrentPriceWithoutFee(vFrom === bestEdge.vert1);\n      vTo.price = vFrom.price*p\n      vTo.gasPrice = vFrom.gasPrice/p\n      addVertice(vTo)\n    }\n  }\n\n  // Set prices by search in depth\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0;\n      if (v.price !== 0) return;\n      let p = e.pool.calcCurrentPriceWithoutFee(from === e.vert1);\n      this.setPrices(v, price * p, gasPrice / p);\n    });\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token.address)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token.address, vert)\n    return vert\n  }\n\n  /*exportPath(from: RToken, to: RToken) {\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    function edgeStyle(e: Edge) {\n      const finish = e.vert1.bestSource === e\n      const start = e.vert0.bestSource === e\n      let label\n      if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n      if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n      const edgeValue = route.has(e) ? 'value: 2' : undefined\n      let arrow\n      if (finish && start) arrow = 'arrows: \"from,to\"'\n      if (finish) arrow = 'arrows: \"to\"'\n      if (start) arrow = 'arrows: \"from\"'\n      return ['', label, edgeValue, arrow].filter((a) => a !== undefined).join(', ')\n    }\n\n    function print(n: number, digits: number) {\n      let out\n      if (n === 0) out = '0'\n      else {\n        const n0 = n > 0 ? n : -n\n        const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n        if (shift <= 0) out = `${Math.round(n0)}`\n        else {\n          const mult = Math.pow(10, shift)\n          out = `${Math.round(n0 * mult) / mult}`\n        }\n        if (n < 0) out = -out\n      }\n      return out\n    }\n\n    function nodeLabel(v: Vertice) {\n      const value = (v.bestIncome * v.price) / toVert.price\n      const income = `${print(value, 3)}`\n      const total = `${print(v.bestTotal, 3)}`\n      // const income = `${print((value/initValue-1)*100, 3)}%`\n      // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n      const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n      return [checkLine, income, total].filter((a) => a !== undefined).join(':')\n    }\n\n    const nodes = `var nodes = new vis.DataSet([\n      ${this.vertices.map((t) => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    ]);\\n`\n    const edges = `var edges = new vis.DataSet([\n      ${this.edges\n        .map((p) => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`)\n        .join(',\\n\\t\\t')}\n    ]);\\n`\n    const data = `var data = {\n        nodes: nodes,\n        edges: edges,\n    };\\n`\n\n    // TODO: This should be removed, this pacakge will not be installable on a client while this remains.\n    const fs = require(\"fs\");\n    fs.writeFileSync(\n      \"D:/Info/Notes/GraphVisualization/data.js\",\n      nodes + edges + data\n    );\n  }*/\n\n  findBestPathExactIn(\n    from: RToken,\n    to: RToken,\n    amountIn: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from.address)\n    const finish = this.tokens.get(to.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ``\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info)) \n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number, gas\n        try {\n          const {out, gasSpent} = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(out) || !isFinite(gasSpent))   // Math errors protection\n            return\n          newIncome = out\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          DEBUG(() => {\n            const st = closestVert?.token == from ? '*' : ''\n            const fn = v2?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}->${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e          \n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  findBestPathExactOut(\n    from: RToken,\n    to: RToken,\n    amountOut: number,\n    _gasPrice?: number\n  ):\n    | {\n        path: Edge[]\n        input: number\n        gasSpent: number\n        totalInput: number\n      }\n    | undefined {\n    const start = this.tokens.get(to.address)\n    const finish = this.tokens.get(from.address)\n    if (!start || !finish) return\n\n    const gasPrice = _gasPrice !== undefined ? _gasPrice : finish.gasPrice\n\n    this.edges.forEach((e) => {\n      e.bestEdgeIncome = 0\n      e.spentGasNew = 0\n    });\n    this.vertices.forEach((v) => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountOut\n    start.bestTotal = amountOut\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let debug_info = ''\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal: number | undefined\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (closestTotal === undefined || v.bestTotal < closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.push(v.bestSource)\n        }\n        DEBUG(() => console.log(debug_info))\n        return {\n          path: bestPath,\n          input: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalInput: finish.bestTotal,\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach((e) => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome: number, gas\n        try {\n          const {inp, gasSpent} = e.calcInput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n          if (!isFinite(inp) || !isFinite(gasSpent))   // Math errors protection\n            return\n          if (inp < 0) return // No enouph liquidity in the pool\n          newIncome = inp\n          gas = gasSpent\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price + newGasSpent * gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, \"Error 373\");\n        e.bestEdgeIncome = newIncome * price;\n        e.spentGasNew = e.spentGas + gas;\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal < v2.bestTotal) {\n          DEBUG(() => {\n            const st = v2?.token == from ? '*' : ''\n            const fn = closestVert?.token == to ? '*' : ''\n            debug_info += `${st}${closestVert?.token.name}<-${v2.token.name}${fn} ${v2.bestIncome} -> ${newIncome}\\n`\n          })\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach((e) => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every((v) => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach((e) => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  getPrimaryPriceForPath(from: Vertice, path: Edge[]): number {\n    let p = 1\n    let prevToken = from\n    path.forEach( edge => {\n      const direction = edge.vert0 === prevToken\n      const edgePrice = edge.pool.calcCurrentPriceWithoutFee(direction)\n      p *= edgePrice\n      prevToken = prevToken.getNeibour(edge) as Vertice\n    })\n    return p\n  }\n\n  findBestRouteExactIn(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactIn(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn)\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = output/amountIn\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: amountIn * totalrouted,\n      amountInBN: getBigNumber(amountIn * totalrouted),\n      amountOut: output,\n      amountOutBN: getBigNumber(output),\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(output - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  findBestRouteExactOut(from: RToken, to: RToken, amountOut: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map((e) => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach((e) => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let input = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let primaryPrice\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPathExactOut(from, to, amountOut * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        input += p.input\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from.address), this.tokens.get(to.address), p.path)\n        totalrouted += routeValues[step]\n        if (step === 0) {\n          primaryPrice = this.getPrimaryPriceForPath(this.tokens.get(from.address) as Vertice, p.path)\n        }\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        fromToken: from,\n        toToken: to,\n        amountIn: 0,\n        amountInBN: BigNumber.from(0),\n        amountOut: 0,\n        amountOutBN: BigNumber.from(0),\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0,\n        totalAmountOutBN: BigNumber.from(0),\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from.address) as Vertice\n    const toVert = this.tokens.get(to.address) as Vertice\n    const {legs, gasSpent, topologyWasChanged} = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      input = this.calcLegsAmountIn(legs, amountOut) ///\n    }\n\n    let swapPrice, priceImpact\n    try {\n      swapPrice = amountOut/input\n      priceImpact = primaryPrice !== undefined? 1- swapPrice/primaryPrice : undefined\n    } catch(e) { /* skip division by 0 errors*/}\n\n    return {\n      status,\n      fromToken: from,\n      toToken: to,\n      primaryPrice,\n      swapPrice,\n      priceImpact,\n      amountIn: input,\n      amountInBN: getBigNumber(input),\n      amountOut: amountOut * totalrouted,\n      amountOutBN: getBigNumber(amountOut * totalrouted),\n      legs,\n      gasSpent,\n      totalAmountOut: amountOut - gasSpent * toVert.gasPrice,\n      totalAmountOutBN: getBigNumber(amountOut - gasSpent * toVert.gasPrice),\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): {\n    legs: RouteLeg[],\n    gasSpent: number,\n    topologyWasChanged: boolean\n  } {\n    const {vertices, topologyWasChanged} = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    vertices.forEach((n) => {\n      const outEdges = n.getOutputEdges().map((e) => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from.vert, from.amount] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        const edge = e[0] as Edge\n        legs.push({\n          poolAddress: edge.pool.address,\n          poolFee: edge.pool.fee,\n          tokenFrom: n.token,\n          tokenTo: (n.getNeibour(edge) as Vertice).token,\n          assumedAmountIn: edge.direction ? edge.amountInPrevious : edge.amountOutPrevious,\n          assumedAmountOut:  edge.direction ? edge.amountOutPrevious : edge.amountInPrevious,\n          swapPortion: quantity,\n          absolutePortion: p / total,\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return {legs, gasSpent, topologyWasChanged}\n  }\n\n  edgeFrom(e: Edge): {vert: Vertice, amount: number} | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? {vert: e.vert0, amount: e.amountInPrevious} : {vert: e.vert1, amount: e.amountOutPrevious}\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number) {\n    const amounts = new Map<string, number>()\n    amounts.set(legs[0].tokenFrom.address, amountIn)\n    legs.forEach((l) => {\n      const vert = this.tokens.get(l.tokenFrom.address);\n      console.assert(vert !== undefined, \"Internal Error 570\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 569\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert0;\n\n      const inputTotal = amounts.get(l.tokenFrom.address);\n      console.assert(inputTotal !== undefined, \"Internal Error 564\");\n      const input = (inputTotal as number) * l.swapPortion;\n      amounts.set(l.tokenFrom.address, (inputTotal as number) - input);\n      const output = pool.calcOutByIn(input, direction).out;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + output);\n    });\n    return amounts.get(legs[legs.length-1].tokenTo.address) || 0;\n  }\n\n  // TODO: make full test coverage!\n  calcLegsAmountIn(legs: RouteLeg[], amountOut: number) {\n    const totalOutputAssumed = new Map<string, number>()\n    legs.forEach(l => {\n      const prevValue = totalOutputAssumed.get(l.tokenFrom.address) || 0\n      totalOutputAssumed.set(l.tokenFrom.address, prevValue + l.assumedAmountOut)\n    })\n\n    const amounts = new Map<string, number>()\n    amounts.set(legs[legs.length-1].tokenTo.address, amountOut)\n    for (let i = legs.length - 1; i >= 0; --i) {\n      const l = legs[i]\n      const vert = this.tokens.get(l.tokenTo.address);\n      console.assert(vert !== undefined, \"Internal Error 884\");\n      const edge = (vert as Vertice).edges.find(\n        (e) => e.pool.address === l.poolAddress\n      );\n      console.assert(edge !== undefined, \"Internel Error 888\");\n      const pool = (edge as Edge).pool;\n      const direction = vert === (edge as Edge).vert1;\n\n      const outputTotal = amounts.get(l.tokenTo.address);\n      console.assert(outputTotal !== undefined, \"Internal Error 893\");\n      const totalAssumed = totalOutputAssumed.get(l.tokenFrom.address)\n      console.assert(totalAssumed !== undefined, \"Internal Error 903\");\n      const output = (outputTotal as number) * l.assumedAmountOut / (totalAssumed as number);\n      const input = pool.calcInByOut(output, direction).inp;\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice;\n      const prevAmount = amounts.get(vertNext.token.address);\n      amounts.set(vertNext.token.address, (prevAmount || 0) + input);\n    };\n    return amounts.get(legs[0].tokenFrom.address) || 0;\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): {vertices: Vertice[], topologyWasChanged: boolean} {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result.status !== 2) {\n      topologyWasChanged = true\n      console.assert(result.status === 0, 'Internal Error 554')\n      while (result.status === 0) {\n        this.removeWeakestEdge(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      if (result.status === 3) {\n        this.removeDeadEnds(result.vertices)\n        result = this.topologySort(from, to)\n      }\n      console.assert(result.status === 2, 'Internal Error 563')\n      if (result.status !== 2) return {vertices: [], topologyWasChanged}\n    }\n    return {vertices: result.vertices, topologyWasChanged}\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach((v) => {\n      v.getInputEdges().forEach((e) => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      v1.getOutputEdges().forEach((e) => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    minVert.getOutputEdges().forEach((e) => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): {status: number, vertices: Vertice[]} {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = current.getOutputEdges()\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return {status: 0, vertices: foundCycle}\n    if (foundDeadEndVerts.length) return {status: 3, vertices: foundDeadEndVerts}\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return {status: 2, vertices: vertsFinished.reverse()}\n    console.assert(true, 'Internal Error 612')\n    return {status: 1, vertices: []}\n  }\n}","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { MultiRoute, Graph, RouteStatus } from \"./Graph\";\nimport { RPool, RToken } from \"./PrimaryPools\";  \n\n// Assumes route is a single path\nfunction calcPriceImactWithoutFee(route: MultiRoute) {\n  if (route.primaryPrice === undefined || route.swapPrice === undefined) {\n    return undefined\n  } else {\n    let oneMinusCombinedFee = 1\n    route.legs.forEach(l => oneMinusCombinedFee *= (1-l.poolFee))\n    //const combinedFee = 1-oneMinusCombinedFee\n    return Math.max(0, 1-route.swapPrice/route.primaryPrice/oneMinusCombinedFee)\n  }\n}\n\nconst defaultFlowNumber = 12\nconst maxFlowNumber = 100\nfunction calcBestFlowNumber(bestSingleRoute: MultiRoute, amountIn: number, gasPriceIn?: number): number {\n  const priceImpact = calcPriceImactWithoutFee(bestSingleRoute)\n  if (!priceImpact) return defaultFlowNumber\n\n  const bestFlowAmount = Math.sqrt(bestSingleRoute.gasSpent*(gasPriceIn || 0)*amountIn/priceImpact)\n  const bestFlowNumber = Math.round(amountIn/bestFlowAmount)\n  if (!isFinite(bestFlowNumber)) return maxFlowNumber\n\n  const realFlowNumber = Math.max(1, Math.min(bestFlowNumber, maxFlowNumber))\n  return realFlowNumber\n}\n\nfunction getBetterRouteExactIn(route1: MultiRoute, route2: MultiRoute): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  return route1.totalAmountOut > route2.totalAmountOut ? route1 : route2\n}\n\nexport function findMultiRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactIn(from, to, amountIn, flows)\n\n  const outSingle = g.findBestRouteExactIn(from, to, amountIn, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactIn(from, to, amountIn/100 + 10_000, 0)?.gasSpent === 0) return outSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(outSingle, amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return outSingle\n\n  const outMulti = g.findBestRouteExactIn(from, to, amountIn, bestFlowNumber)\n  return getBetterRouteExactIn(outSingle, outMulti)\n}\n\nfunction getBetterRouteExactOut(route1: MultiRoute, route2: MultiRoute, gasPrice: number): MultiRoute {\n  if (route1.status == RouteStatus.NoWay) return route2\n  if (route2.status == RouteStatus.NoWay) return route1\n  if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success) return route2\n  if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success) return route1\n  const totalAmountIn1 = route1.amountIn + route1.gasSpent*gasPrice\n  const totalAmountIn2 = route2.amountIn + route2.gasSpent*gasPrice\n  return totalAmountIn1 < totalAmountIn2 ? route1 : route2\n}\n\nexport function findMultiRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number,\n  flows?: number | number[]\n): MultiRoute {\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (flows !== undefined) return g.findBestRouteExactOut(from, to, amountOut, flows)\n\n  const inSingle = g.findBestRouteExactOut(from, to, amountOut, 1)\n  // Possible optimization of timing\n  // if (g.findBestPathExactOut(from, to, amountOut/100 + 10_000, 0)?.gasSpent === 0) return inSingle\n  g.cleanTmpData()\n\n  const bestFlowNumber = calcBestFlowNumber(inSingle, inSingle.amountIn, fromV?.gasPrice)\n  if (bestFlowNumber === 1) return inSingle\n\n  const inMulti = g.findBestRouteExactOut(from, to, amountOut, bestFlowNumber)\n  return getBetterRouteExactOut(inSingle, inMulti, gasPrice)\n}\n\nexport function findSingleRouteExactIn(\n  from: RToken,\n  to: RToken,\n  amountIn: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountIn instanceof BigNumber) {\n    amountIn = parseInt(amountIn.toString())\n  }\n\n  const out = g.findBestRouteExactIn(from, to, amountIn, 1)\n  return out\n}\n\nexport function findSingleRouteExactOut(\n  from: RToken,\n  to: RToken,\n  amountOut: BigNumber | number,\n  pools: RPool[],\n  baseToken: RToken,\n  gasPrice: number\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from.address)\n  if (fromV?.price === 0) {\n    g.setPricesStable(fromV, 1, 0)\n  }\n\n  if (amountOut instanceof BigNumber) {\n    amountOut = parseInt(amountOut.toString())\n  }\n\n  const out = g.findBestRouteExactOut(from, to, amountOut, 1)\n  return out\n}\n\nexport function calcTokenPrices(pools: RPool[], baseToken: RToken): Map<RToken, number> {\n  const g = new Graph(pools, baseToken, 0)\n  const res = new Map<RToken, number>()\n  g.vertices.forEach(v => res.set(v.token, v.price))\n  return res\n}","import { BigNumber } from '@ethersproject/bignumber'\n\ninterface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity',\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info,\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info,\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info,\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info,\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info,\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\n","import {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n} from './MultiRouterTypes'\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { getBigNumber, revertPositive } from \"../Utils\";\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D).div(r0).mul(D).div(r1).div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)))\n    if (D.sub(prevD).abs().lte(1)) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION).div(nA).add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D))\n    if (y.sub(yPrev).abs().lte(1)) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n  }\n  return -1\n}\n\nexport class OutOfLiquidity extends Error {}\n\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n"],"names":["ASSERT","f","t","console","error","DEBUG_MODE","DEBUG","DEBUG_MODE_ON","on","closeValues","a","b","accuracy","Math","abs","calcSquareEquation","c","D","assert","sqrtD","sqrt","revertPositive","out","hint","min","max","x0","y0","e","getBigNumber","value","v","Number","MAX_SAFE_INTEGER","BigNumber","from","round","exp","floor","log","LN2","shift","mant","pow","res","mul","TYPICAL_SWAP_GAS_COST","TYPICAL_MINIMAL_LIQUIDITY","RPool","address","token0","token1","fee","reserve0","reserve1","minLiquidity","swapGasCost","updateReserves","res0","res1","ConstantProductRPool","reserve0Number","parseInt","toString","reserve1Number","calcOutByIn","amountIn","direction","x","y","gasSpent","calcInByOut","amountOut","inp","POSITIVE_INFINITY","input","calcCurrentPriceWithoutFee","calcPrice","takeFeeIntoAccount","oneMinusFee","xf","calcInputByPrice","price","getLiquidity","HybridRPool","A","computeLiquidity","eq","r0","r1","isZero","s","add","nA","prevD","i","dP","div","A_PRECISION","sub","lte","computeY","yPrev","xBN","yBN","xNewBN","yNewBN","dy","lt","xI","ac4","Ds","CL_MIN_TICK","CL_MAX_TICK","CLRPool","tickSpacing","liquidity","sqrtPrice","nearestTick","ticks","length","push","index","DLiquidity","unshift","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","output","maxDx","maxDy","outBeforeFee","p","StableSwapRPool","k","computeK","yHint","x2","shl","x3","xCube","ySquare","yCube","xNew","yNew","ceil","calcDirection","gt","q","qD","Q","QD","sqrtQ","sqrtQD","aD","bD","a3","a3D","b3","b3D","yD","RouteStatus","Edge","v0","v1","pool","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","spentGas","spentGasNew","bestEdgeIncome","cleanTmpData","reserve","calcOutput","gas","calcInput","checkMinimalLiquidityExceededAfterSwap","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","token","edges","gasPrice","bestTotal","bestSource","undefined","checkLine","getOutputEdges","filter","getInputEdges","Graph","pools","baseToken","vertices","tokens","Map","forEach","getOrCreateVertice","edge","baseVert","get","setPricesStable","edgeValues","addVertice","newEdges","set","sort","e1","e2","nextEdges","bestEdge","pop","vFrom","vTo","setPrices","map","r2","vert","findBestPathExactIn","_gasPrice","start","finish","processedVert","Set","nextVertList","debug_info","closestVert","closestTotal","closestPosition","bestPath","path","totalOutput","splice","v2","has","newIncome","isFinite","newGasSpent","newTotal","st","fn","name","findBestPathExactOut","totalInput","addPath","_from","every","total","totalModule","getPrimaryPriceForPath","prevToken","edgePrice","findBestRouteExactIn","mode","routeValues","Array","isArray","sum","reduce","gasSpentInit","totalrouted","primaryPrice","step","status","NoWay","fromToken","toToken","amountInBN","amountOutBN","legs","totalAmountOut","totalAmountOutBN","Partial","Success","fromVert","toVert","getRouteLegs","topologyWasChanged","calcLegsAmountOut","swapPrice","priceImpact","findBestRouteExactOut","calcLegsAmountIn","cleanTopology","n","outEdges","edgeFrom","amount","quantity","poolAddress","poolFee","tokenFrom","tokenTo","assumedAmountIn","assumedAmountOut","swapPortion","absolutePortion","amounts","l","find","inputTotal","vertNext","prevAmount","totalOutputAssumed","prevValue","outputTotal","totalAssumed","result","topologySort","removeWeakestEdge","removeDeadEnds","verts","minVert","minVertNext","minOutput","MAX_VALUE","vertState","vertsFinished","foundCycle","foundDeadEndVerts","topSortRecursive","current","state","successors2Exist","reverse","calcPriceImactWithoutFee","route","oneMinusCombinedFee","defaultFlowNumber","maxFlowNumber","calcBestFlowNumber","bestSingleRoute","gasPriceIn","bestFlowAmount","bestFlowNumber","realFlowNumber","getBetterRouteExactIn","route1","route2","findMultiRouteExactIn","flows","g","fromV","outSingle","outMulti","getBetterRouteExactOut","totalAmountIn1","totalAmountIn2","findMultiRouteExactOut","inSingle","inMulti","findSingleRouteExactIn","findSingleRouteExactOut","calcTokenPrices","PoolType","Pool","_info","info","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","RWeightedPool","Weighted","weight0","weight1","RConcentratedLiquidityPool","ConcentratedLiquidity","DCacheBN","HybridComputeLiquidity","HybridgetY","wPool","weightRatio","actualIn","OutOfLiquidity","Error","hPool","calcInputByPriceConstantMean","priceEffective"],"mappings":"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"}