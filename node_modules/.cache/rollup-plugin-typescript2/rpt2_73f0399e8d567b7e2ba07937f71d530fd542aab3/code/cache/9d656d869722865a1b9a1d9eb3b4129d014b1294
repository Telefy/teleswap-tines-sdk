{"code":"import { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Graph, RouteStatus } from \"./Graph\";\r\n// Assumes route is a single path\r\nfunction calcPriceImactWithoutFee(route) {\r\n    if (route.primaryPrice === undefined || route.swapPrice === undefined) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        let oneMinusCombinedFee = 1;\r\n        route.legs.forEach(l => oneMinusCombinedFee *= (1 - l.poolFee));\r\n        //const combinedFee = 1-oneMinusCombinedFee\r\n        return Math.max(0, 1 - route.swapPrice / route.primaryPrice / oneMinusCombinedFee);\r\n    }\r\n}\r\nconst defaultFlowNumber = 12;\r\nconst maxFlowNumber = 100;\r\nfunction calcBestFlowNumber(bestSingleRoute, amountIn, gasPriceIn) {\r\n    const priceImpact = calcPriceImactWithoutFee(bestSingleRoute);\r\n    if (!priceImpact)\r\n        return defaultFlowNumber;\r\n    const bestFlowAmount = Math.sqrt(bestSingleRoute.gasSpent * (gasPriceIn || 0) * amountIn / priceImpact);\r\n    const bestFlowNumber = Math.round(amountIn / bestFlowAmount);\r\n    if (!isFinite(bestFlowNumber))\r\n        return maxFlowNumber;\r\n    const realFlowNumber = Math.max(1, Math.min(bestFlowNumber, maxFlowNumber));\r\n    return realFlowNumber;\r\n}\r\nfunction getBetterRouteExactIn(route1, route2) {\r\n    if (route1.status == RouteStatus.NoWay)\r\n        return route2;\r\n    if (route2.status == RouteStatus.NoWay)\r\n        return route1;\r\n    if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success)\r\n        return route2;\r\n    if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success)\r\n        return route1;\r\n    return route1.totalAmountOut > route2.totalAmountOut ? route1 : route2;\r\n}\r\nexport function findMultiRouteExactIn(from, to, amountIn, pools, baseToken, gasPrice, flows) {\r\n    if (amountIn instanceof BigNumber) {\r\n        amountIn = parseInt(amountIn.toString());\r\n    }\r\n    const g = new Graph(pools, baseToken, gasPrice);\r\n    const fromV = g.tokens.get(from.address);\r\n    if (fromV?.price === 0) {\r\n        g.setPricesStable(fromV, 1, 0);\r\n    }\r\n    if (flows !== undefined)\r\n        return g.findBestRouteExactIn(from, to, amountIn, flows);\r\n    const outSingle = g.findBestRouteExactIn(from, to, amountIn, 1);\r\n    // Possible optimization of timing\r\n    // if (g.findBestPathExactIn(from, to, amountIn/100 + 10_000, 0)?.gasSpent === 0) return outSingle\r\n    g.cleanTmpData();\r\n    const bestFlowNumber = calcBestFlowNumber(outSingle, amountIn, fromV?.gasPrice);\r\n    if (bestFlowNumber === 1)\r\n        return outSingle;\r\n    const outMulti = g.findBestRouteExactIn(from, to, amountIn, bestFlowNumber);\r\n    return getBetterRouteExactIn(outSingle, outMulti);\r\n}\r\nfunction getBetterRouteExactOut(route1, route2, gasPrice) {\r\n    if (route1.status == RouteStatus.NoWay)\r\n        return route2;\r\n    if (route2.status == RouteStatus.NoWay)\r\n        return route1;\r\n    if (route1.status == RouteStatus.Partial && route2.status == RouteStatus.Success)\r\n        return route2;\r\n    if (route2.status == RouteStatus.Partial && route1.status == RouteStatus.Success)\r\n        return route1;\r\n    const totalAmountIn1 = route1.amountIn + route1.gasSpent * gasPrice;\r\n    const totalAmountIn2 = route2.amountIn + route2.gasSpent * gasPrice;\r\n    return totalAmountIn1 < totalAmountIn2 ? route1 : route2;\r\n}\r\nexport function findMultiRouteExactOut(from, to, amountOut, pools, baseToken, gasPrice, flows) {\r\n    if (amountOut instanceof BigNumber) {\r\n        amountOut = parseInt(amountOut.toString());\r\n    }\r\n    const g = new Graph(pools, baseToken, gasPrice);\r\n    const fromV = g.tokens.get(from.address);\r\n    if (fromV?.price === 0) {\r\n        g.setPricesStable(fromV, 1, 0);\r\n    }\r\n    if (flows !== undefined)\r\n        return g.findBestRouteExactOut(from, to, amountOut, flows);\r\n    const inSingle = g.findBestRouteExactOut(from, to, amountOut, 1);\r\n    // Possible optimization of timing\r\n    // if (g.findBestPathExactOut(from, to, amountOut/100 + 10_000, 0)?.gasSpent === 0) return inSingle\r\n    g.cleanTmpData();\r\n    const bestFlowNumber = calcBestFlowNumber(inSingle, inSingle.amountIn, fromV?.gasPrice);\r\n    if (bestFlowNumber === 1)\r\n        return inSingle;\r\n    const inMulti = g.findBestRouteExactOut(from, to, amountOut, bestFlowNumber);\r\n    return getBetterRouteExactOut(inSingle, inMulti, gasPrice);\r\n}\r\nexport function findSingleRouteExactIn(from, to, amountIn, pools, baseToken, gasPrice) {\r\n    const g = new Graph(pools, baseToken, gasPrice);\r\n    const fromV = g.tokens.get(from.address);\r\n    if (fromV?.price === 0) {\r\n        g.setPricesStable(fromV, 1, 0);\r\n    }\r\n    if (amountIn instanceof BigNumber) {\r\n        amountIn = parseInt(amountIn.toString());\r\n    }\r\n    const out = g.findBestRouteExactIn(from, to, amountIn, 1);\r\n    return out;\r\n}\r\nexport function findSingleRouteExactOut(from, to, amountOut, pools, baseToken, gasPrice) {\r\n    const g = new Graph(pools, baseToken, gasPrice);\r\n    const fromV = g.tokens.get(from.address);\r\n    if (fromV?.price === 0) {\r\n        g.setPricesStable(fromV, 1, 0);\r\n    }\r\n    if (amountOut instanceof BigNumber) {\r\n        amountOut = parseInt(amountOut.toString());\r\n    }\r\n    const out = g.findBestRouteExactOut(from, to, amountOut, 1);\r\n    return out;\r\n}\r\nexport function calcTokenPrices(pools, baseToken) {\r\n    const g = new Graph(pools, baseToken, 0);\r\n    const res = new Map();\r\n    g.vertices.forEach(v => res.set(v.token, v.price));\r\n    return res;\r\n}\r\n//# sourceMappingURL=MultiRouter.js.map","references":["/Users/mazelon/Workarea/teleswap-tines-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts","/Users/mazelon/Workarea/teleswap-tines-sdk/src/Graph.ts","/Users/mazelon/Workarea/teleswap-tines-sdk/src/PrimaryPools.ts"],"map":"{\"version\":3,\"file\":\"MultiRouter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/MultiRouter.ts\"],\"names\":[],\"mappings\":\"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\"}"}
