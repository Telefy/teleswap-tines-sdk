{"code":"import { RPool, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST } from \"./PrimaryPools\";\r\nexport const CL_MIN_TICK = -887272;\r\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1;\r\nexport class CLRPool extends RPool {\r\n    constructor(address, token0, token1, fee, tickSpacing, reserve0, reserve1, liquidity, sqrtPrice, nearestTick, ticks) {\r\n        super(address, token0, token1, fee, reserve0, reserve1, TYPICAL_MINIMAL_LIQUIDITY, TYPICAL_SWAP_GAS_COST);\r\n        this.tickSpacing = tickSpacing;\r\n        this.liquidity = liquidity;\r\n        this.sqrtPrice = sqrtPrice;\r\n        this.nearestTick = nearestTick;\r\n        this.ticks = ticks;\r\n        if (this.ticks.length === 0) {\r\n            this.ticks.push({ index: CL_MIN_TICK, DLiquidity: 0 });\r\n            this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 });\r\n        }\r\n        if (this.ticks[0].index > CL_MIN_TICK)\r\n            this.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 });\r\n        if (this.ticks[this.ticks.length - 1].index < CL_MAX_TICK)\r\n            this.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 });\r\n    }\r\n    calcOutByIn(amountIn, direction) {\r\n        let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1;\r\n        let currentPrice = this.sqrtPrice;\r\n        let currentLiquidity = this.liquidity;\r\n        let outAmount = 0;\r\n        let input = amountIn;\r\n        while (input > 0) {\r\n            if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\r\n                return { out: outAmount, gasSpent: this.swapGasCost };\r\n            const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index));\r\n            // console.log('L, P, tick, nextP', currentLiquidity,\r\n            //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\r\n            let output = 0;\r\n            if (direction) {\r\n                const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice;\r\n                //console.log('input, maxDx', input, maxDx);\r\n                if (input <= maxDx) {\r\n                    output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice);\r\n                    input = 0;\r\n                }\r\n                else {\r\n                    output = currentLiquidity * (currentPrice - nextTickPrice);\r\n                    currentPrice = nextTickPrice;\r\n                    input -= maxDx;\r\n                    if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\r\n                        currentLiquidity -= this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    else {\r\n                        currentLiquidity += this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    nextTickToCross--;\r\n                }\r\n            }\r\n            else {\r\n                const maxDy = currentLiquidity * (nextTickPrice - currentPrice);\r\n                //console.log('input, maxDy', input, maxDy);\r\n                if (input <= maxDy) {\r\n                    output = input / currentPrice / (currentPrice + input / currentLiquidity);\r\n                    input = 0;\r\n                }\r\n                else {\r\n                    output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice;\r\n                    currentPrice = nextTickPrice;\r\n                    input -= maxDy;\r\n                    if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\r\n                        currentLiquidity += this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    else {\r\n                        currentLiquidity -= this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    nextTickToCross++;\r\n                }\r\n            }\r\n            outAmount += output * (1 - this.fee);\r\n            //console.log('out', outAmount);\r\n        }\r\n        return { out: outAmount, gasSpent: this.swapGasCost }; // TODO: more accurate gas prediction \r\n    }\r\n    calcInByOut(amountOut, direction) {\r\n        let nextTickToCross = direction ? this.nearestTick : this.nearestTick + 1;\r\n        let currentPrice = this.sqrtPrice;\r\n        let currentLiquidity = this.liquidity;\r\n        let input = 0;\r\n        let outBeforeFee = amountOut / (1 - this.fee);\r\n        while (outBeforeFee > 0) {\r\n            if (nextTickToCross < 0 || nextTickToCross >= this.ticks.length)\r\n                return { inp: input, gasSpent: this.swapGasCost };\r\n            const nextTickPrice = Math.sqrt(Math.pow(1.0001, this.ticks[nextTickToCross].index));\r\n            // console.log('L, P, tick, nextP', currentLiquidity,\r\n            //     currentPrice, this.ticks[nextTickToCross].index, nextTickPrice);\r\n            if (direction) {\r\n                const maxDy = currentLiquidity * (currentPrice - nextTickPrice);\r\n                //console.log('input, maxDy', input, maxDy);\r\n                if (outBeforeFee <= maxDy) {\r\n                    input += outBeforeFee / currentPrice / (currentPrice - outBeforeFee / currentLiquidity);\r\n                    outBeforeFee = 0;\r\n                }\r\n                else {\r\n                    input += (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice;\r\n                    currentPrice = nextTickPrice;\r\n                    outBeforeFee -= maxDy;\r\n                    if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\r\n                        currentLiquidity -= this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    else {\r\n                        currentLiquidity += this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    nextTickToCross--;\r\n                }\r\n            }\r\n            else {\r\n                const maxDx = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice;\r\n                //console.log('outBeforeFee, maxDx', outBeforeFee, maxDx);\r\n                if (outBeforeFee <= maxDx) {\r\n                    input += (currentLiquidity * currentPrice * outBeforeFee) / (currentLiquidity / currentPrice - outBeforeFee);\r\n                    outBeforeFee = 0;\r\n                }\r\n                else {\r\n                    input += currentLiquidity * (nextTickPrice - currentPrice);\r\n                    currentPrice = nextTickPrice;\r\n                    outBeforeFee -= maxDx;\r\n                    if ((this.ticks[nextTickToCross].index / this.tickSpacing) % 2 === 0) {\r\n                        currentLiquidity += this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    else {\r\n                        currentLiquidity -= this.ticks[nextTickToCross].DLiquidity;\r\n                    }\r\n                    nextTickToCross++;\r\n                }\r\n            }\r\n        }\r\n        return { inp: input, gasSpent: this.swapGasCost };\r\n    }\r\n    calcCurrentPriceWithoutFee(direction) {\r\n        const p = this.sqrtPrice * this.sqrtPrice;\r\n        return direction ? p : 1 / p;\r\n    }\r\n}\r\n//# sourceMappingURL=CLPool.js.map","references":["/Users/mazelon/Workarea/teleswap-tines-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts","/Users/mazelon/Workarea/teleswap-tines-sdk/src/PrimaryPools.ts"],"map":"{\"version\":3,\"file\":\"CLPool.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/CLPool.ts\"],\"names\":[],\"mappings\":\"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\"}"}
