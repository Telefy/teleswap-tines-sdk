{"code":"import { PoolType, } from './MultiRouterTypes';\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { getBigNumber, revertPositive } from \"../Utils\";\r\nconst A_PRECISION = 100;\r\nconst DCacheBN = new Map();\r\nexport function HybridComputeLiquidity(pool) {\r\n    const res = DCacheBN.get(pool);\r\n    if (res !== undefined)\r\n        return res;\r\n    const r0 = pool.reserve0;\r\n    const r1 = pool.reserve1;\r\n    if (r0.isZero() && r1.isZero()) {\r\n        DCacheBN.set(pool, BigNumber.from(0));\r\n        return BigNumber.from(0);\r\n    }\r\n    const s = r0.add(r1);\r\n    const nA = BigNumber.from(pool.A * 2);\r\n    let prevD;\r\n    let D = s;\r\n    for (let i = 0; i < 256; i++) {\r\n        const dP = D.mul(D).div(r0).mul(D).div(r1).div(4);\r\n        prevD = D;\r\n        D = nA\r\n            .mul(s)\r\n            .div(A_PRECISION)\r\n            .add(dP.mul(2))\r\n            .mul(D)\r\n            .div(nA.div(A_PRECISION).sub(1).mul(D).add(dP.mul(3)));\r\n        if (D.sub(prevD).abs().lte(1)) {\r\n            break;\r\n        }\r\n    }\r\n    DCacheBN.set(pool, D);\r\n    return D;\r\n}\r\nexport function HybridgetY(pool, x) {\r\n    const D = HybridComputeLiquidity(pool);\r\n    const nA = pool.A * 2;\r\n    let c = D.mul(D)\r\n        .div(x.mul(2))\r\n        .mul(D)\r\n        .div((nA * 2) / A_PRECISION);\r\n    let b = D.mul(A_PRECISION).div(nA).add(x);\r\n    let yPrev;\r\n    let y = D;\r\n    for (let i = 0; i < 256; i++) {\r\n        yPrev = y;\r\n        y = y.mul(y).add(c).div(y.mul(2).add(b).sub(D));\r\n        if (y.sub(yPrev).abs().lte(1)) {\r\n            break;\r\n        }\r\n    }\r\n    return y;\r\n}\r\nexport function calcOutByIn(pool, amountIn, direction = true) {\r\n    const xBN = direction ? pool.reserve0 : pool.reserve1;\r\n    const yBN = direction ? pool.reserve1 : pool.reserve0;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            return (y * amountIn) / (x / (1 - pool.fee) + amountIn);\r\n        }\r\n        case PoolType.Weighted: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            const wPool = pool;\r\n            const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0;\r\n            const actualIn = amountIn * (1 - pool.fee);\r\n            const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio));\r\n            return out;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            // const xNew = x + amountIn*(1-pool.fee);\r\n            // const yNew = HybridgetY(pool, xNew);\r\n            // const dy = y - yNew;\r\n            const xNewBN = xBN.add(getBigNumber(amountIn * (1 - pool.fee)));\r\n            const yNewBN = HybridgetY(pool, xNewBN);\r\n            const dy = parseInt(yBN.sub(yNewBN).toString());\r\n            return dy;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nexport class OutOfLiquidity extends Error {\r\n}\r\nexport function calcInByOut(pool, amountOut, direction) {\r\n    let input = 0;\r\n    const xBN = direction ? pool.reserve0 : pool.reserve1;\r\n    const yBN = direction ? pool.reserve1 : pool.reserve0;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            input = (x * amountOut) / (1 - pool.fee) / (y - amountOut);\r\n            break;\r\n        }\r\n        case PoolType.Weighted: {\r\n            const x = parseInt(xBN.toString());\r\n            const y = parseInt(yBN.toString());\r\n            const wPool = pool;\r\n            const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0;\r\n            input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1);\r\n            break;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            let yNewBN = yBN.sub(getBigNumber(amountOut));\r\n            if (yNewBN.lt(1))\r\n                // lack of precision\r\n                yNewBN = BigNumber.from(1);\r\n            const xNewBN = HybridgetY(pool, yNewBN);\r\n            input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee));\r\n            // const yNew = y - amountOut;\r\n            // const xNew = HybridgetY(pool, yNew);\r\n            // input = (xNew - x)/(1-pool.fee);\r\n            break;\r\n        }\r\n        default:\r\n            console.error('Unknown pool type');\r\n    }\r\n    // ASSERT(() => {\r\n    //   const amount2 = calcOutByIn(pool, input, direction);\r\n    //   const res = closeValues(amountOut, amount2, 1e-6);\r\n    //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\r\n    //   return res;\r\n    // });\r\n    if (input < 1)\r\n        input = 1;\r\n    return input;\r\n}\r\nexport function calcPrice(pool, amountIn, takeFeeIntoAccount = true) {\r\n    const r0 = parseInt(pool.reserve0.toString());\r\n    const r1 = parseInt(pool.reserve1.toString());\r\n    const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1;\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const x = r0 / oneMinusFee;\r\n            return (r1 * x) / (x + amountIn) / (x + amountIn);\r\n        }\r\n        case PoolType.Weighted: {\r\n            const wPool = pool;\r\n            const weightRatio = wPool.weight0 / wPool.weight1;\r\n            const x = r0 + amountIn * oneMinusFee;\r\n            return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            const hPool = pool;\r\n            const D = parseInt(HybridComputeLiquidity(hPool).toString());\r\n            const A = hPool.A / A_PRECISION;\r\n            const x = r0 + amountIn;\r\n            const b = 4 * A * x + D - 4 * A * D;\r\n            const ac4 = (D * D * D) / x;\r\n            const Ds = Math.sqrt(b * b + 4 * A * ac4);\r\n            const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee;\r\n            return res;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nfunction calcInputByPriceConstantMean(pool, price) {\r\n    const r0 = parseInt(pool.reserve0.toString());\r\n    const r1 = parseInt(pool.reserve1.toString());\r\n    const weightRatio = pool.weight0 / pool.weight1;\r\n    const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio);\r\n    return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee);\r\n}\r\nexport function calcInputByPrice(pool, priceEffective, hint = 1) {\r\n    switch (pool.type) {\r\n        case PoolType.ConstantProduct: {\r\n            const r0 = parseInt(pool.reserve0.toString());\r\n            const r1 = parseInt(pool.reserve1.toString());\r\n            const x = r0 / (1 - pool.fee);\r\n            const res = Math.sqrt(r1 * x * priceEffective) - x;\r\n            return res;\r\n        }\r\n        case PoolType.Weighted: {\r\n            const res = calcInputByPriceConstantMean(pool, priceEffective);\r\n            return res;\r\n        }\r\n        case PoolType.Hybrid: {\r\n            return revertPositive((x) => 1 / calcPrice(pool, x), priceEffective, hint);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n//# sourceMappingURL=MultiRouterMath.js.map","references":["/Users/mazelon/Workarea/teleswap-tines-sdk/src/deprecated/MultiRouterTypes.ts","/Users/mazelon/Workarea/teleswap-tines-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts","/Users/mazelon/Workarea/teleswap-tines-sdk/src/Utils.ts"],"map":"{\"version\":3,\"file\":\"MultiRouterMath.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/deprecated/MultiRouterMath.ts\"],\"names\":[],\"mappings\":\"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\"}"}
