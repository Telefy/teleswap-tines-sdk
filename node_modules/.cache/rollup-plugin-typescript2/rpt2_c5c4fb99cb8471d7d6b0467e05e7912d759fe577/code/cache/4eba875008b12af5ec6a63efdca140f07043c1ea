{"code":"import { BigNumber } from \"@ethersproject/bignumber\";\r\nexport function ASSERT(f, t) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!f() && t)\r\n            console.error(t);\r\n    }\r\n}\r\nlet DEBUG_MODE = false;\r\nexport function DEBUG(f) {\r\n    if (DEBUG_MODE)\r\n        f();\r\n}\r\nexport function DEBUG_MODE_ON(on) {\r\n    DEBUG_MODE = on;\r\n}\r\nexport function closeValues(a, b, accuracy) {\r\n    if (accuracy === 0)\r\n        return a === b;\r\n    if (a < 1 / accuracy)\r\n        return Math.abs(a - b) <= 10;\r\n    return Math.abs(a / b - 1) < accuracy;\r\n}\r\nexport function calcSquareEquation(a, b, c) {\r\n    const D = b * b - 4 * a * c;\r\n    console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`);\r\n    const sqrtD = Math.sqrt(D);\r\n    return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a];\r\n}\r\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\r\n// hint - approximation of x to spead up the algorithm\r\n// f assumed to be continues monotone growth function defined everywhere\r\nexport function revertPositive(f, out, hint = 1) {\r\n    try {\r\n        if (out <= f(0))\r\n            return 0;\r\n        let min, max;\r\n        if (f(hint) > out) {\r\n            min = hint / 2;\r\n            while (f(min) > out)\r\n                min /= 2;\r\n            max = min * 2;\r\n        }\r\n        else {\r\n            max = hint * 2;\r\n            while (f(max) < out)\r\n                max *= 2;\r\n            min = max / 2;\r\n        }\r\n        while (max / min - 1 > 1e-4) {\r\n            const x0 = (min + max) / 2;\r\n            const y0 = f(x0);\r\n            if (out === y0)\r\n                return x0;\r\n            if (out < y0)\r\n                max = x0;\r\n            else\r\n                min = x0;\r\n        }\r\n        return (min + max) / 2;\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n}\r\nexport function getBigNumber(value) {\r\n    const v = Math.abs(value);\r\n    if (v < Number.MAX_SAFE_INTEGER)\r\n        return BigNumber.from(Math.round(value));\r\n    const exp = Math.floor(Math.log(v) / Math.LN2);\r\n    console.assert(exp >= 51, \"Internal Error 314\");\r\n    const shift = exp - 51;\r\n    const mant = Math.round(v / Math.pow(2, shift));\r\n    const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift));\r\n    return value > 0 ? res : res.mul(-1);\r\n}\r\n//# sourceMappingURL=Utils.js.map","references":["/Users/mazelon/Workarea/teleswap-tines-sdk/node_modules/@ethersproject/bignumber/lib/index.d.ts"],"map":"{\"version\":3,\"file\":\"Utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Utils.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/mazelon/Workarea/teleswap-tines-sdk/Utils.d.ts","writeByteOrderMark":false,"text":"import { BigNumber } from \"@ethersproject/bignumber\";\r\nexport declare function ASSERT(f: () => boolean, t?: string): void;\r\nexport declare function DEBUG(f: () => any): void;\r\nexport declare function DEBUG_MODE_ON(on: boolean): void;\r\nexport declare function closeValues(a: number, b: number, accuracy: number): boolean;\r\nexport declare function calcSquareEquation(a: number, b: number, c: number): [number, number];\r\nexport declare function revertPositive(f: (x: number) => number, out: number, hint?: number): number;\r\nexport declare function getBigNumber(value: number): BigNumber;\r\n"}}
