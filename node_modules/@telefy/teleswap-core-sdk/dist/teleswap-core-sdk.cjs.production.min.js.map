{"version":3,"file":"teleswap-core-sdk.cjs.production.min.js","sources":["../src/constants/chainId.ts","../src/constants/variables.ts","../src/constants/addresses.ts","../src/utils/validateAndParseAddress.ts","../src/entities/baseCurrency.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/nativeCurrency.ts","../src/entities/ether.ts","../src/entities/token.ts","../src/utils/math.ts","../src/utils/contract.ts","../src/utils/computePriceImpact.ts","../src/utils/rebase.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GOERLI = 5,\n  KOVAN = 42,\n  ARBITRUM_KOVAN = 144545313136048,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_TESTNET = 79377087078960,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  FUSE = 122,\n  TELOS = 40,\n  HARDHAT = 31337,\n  MOONBEAM = 1284,\n  OPTIMISM = 10\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import { AddressMap } from '../types'\nimport { ChainId } from './chainId'\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GOERLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.ARBITRUM_ONE]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e'\n}\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM_ONE]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607'\n}\n\nexport const USD_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: USDC_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM_KOVAN]: USDC_ADDRESS[ChainId.ARBITRUM_KOVAN],\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\n  [ChainId.ARBITRUM_ONE]: USDC_ADDRESS[ChainId.ARBITRUM_ONE],\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\n  [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM]\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GOERLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.ARBITRUM_ONE]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006'\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GOERLI]: WETH9_ADDRESS[ChainId.GOERLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM_KOVAN]: WETH9_ADDRESS[ChainId.ARBITRUM_KOVAN],\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\n  [ChainId.ARBITRUM_ONE]: WETH9_ADDRESS[ChainId.ARBITRUM_ONE],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F'\n}\n\nexport const DAI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.ARBITRUM_ONE]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1'\n}\n\nexport const USDT_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\n  [ChainId.ARBITRUM_ONE]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58'\n}\n\nexport const MIM_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\n  [ChainId.ARBITRUM_ONE]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb'\n}\n\nexport const FRAX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\n  [ChainId.ARBITRUM_ONE]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200'\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GOERLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_ONE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GOERLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_ONE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GOERLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_KOVAN]: ''\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GOERLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.ARBITRUM_KOVAN]: ''\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GOERLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.ARBITRUM_KOVAN]: ''\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1'\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GOERLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM_ONE]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ARBITRUM_ONE]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42'\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ARBITRUM_ONE]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084'\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.ARBITRUM_ONE]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920'\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.ARBITRUM_ONE]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448'\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\n\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\n\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM_ONE]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59'\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ARBITRUM_ONE]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6'\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM_ONE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581'\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d'\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GOERLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2'\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955'\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GOERLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.ARBITRUM_ONE]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F'\n}\n\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\n  [ChainId.ARBITRUM_ONE]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\n  [ChainId.ARBITRUM_KOVAN]: ''\n}\n\nexport const MULTISIG_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\n  // [ChainId.ROPSTEN]: '',\n  // [ChainId.RINKEBY]: '',\n  // [ChainId.GOERLI]: '',\n  // [ChainId.KOVAN]: '',\n  // [ChainId.ARBITRUM_KOVAN]: '',\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\n  [ChainId.ARBITRUM_ONE]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\n  // [ChainId.HECO]: '',\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\n  // [ChainId.OKEX]: '',\n  // [ChainId.OKEX_TESTNET]: '',\n  // [ChainId.PALM]: '',\n  // [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\n  // [ChainId.TELOS]: '',\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316'\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Teleswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Teleswap contracts. Currencies must\n   * implement this to be used in Teleswap\n   */\n  public abstract get wrapped(): Token\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { ChainTokenMap, TokenMap } from '../types'\nimport { SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from './chainId'\nimport { Token } from '../entities/Token'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM_ONE]: new Token(ChainId.ARBITRUM_ONE, USDC_ADDRESS[ChainId.ARBITRUM_ONE], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin')\n}\n\nexport const USD: TokenMap = {\n  ...USDC,\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GOERLI]: new Token(ChainId.GOERLI, WETH9_ADDRESS[ChainId.GOERLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_ONE]: new Token(\n    ChainId.ARBITRUM_ONE,\n    WETH9_ADDRESS[ChainId.ARBITRUM_ONE],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GOERLI]: WETH9[ChainId.GOERLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM_ONE]: WETH9[ChainId.ARBITRUM_ONE],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer')\n}\n\nexport const SUSHI: ChainTokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, SUSHI_ADDRESS[ChainId.MAINNET], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.GOERLI]: new Token(ChainId.GOERLI, SUSHI_ADDRESS[ChainId.GOERLI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.ARBITRUM_ONE]: new Token(\n    ChainId.ARBITRUM_ONE,\n    SUSHI_ADDRESS[ChainId.ARBITRUM_ONE],\n    18,\n    'SUSHI',\n    'SushiToken'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken')\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants/variables'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants/variables'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants/variables'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants/variables'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from '../constants/tokens'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n\n/**\n * Returns the smallest member of the array\n * @param values the values from which the smallest gets returned\n * @returns the smallest memmber of the array\n */\nexport function minimum(...values: JSBI[]): JSBI {\n  let lowest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.LT(value, lowest)) {\n      lowest = value\n    }\n  }\n  return lowest\n}\n\n/**\n * Returns the biggest member of the array\n * @param values the values from which the biggest gets returned\n * @returns the biggest memmber of the array\n */\nexport function maximum(...values: JSBI[]): JSBI {\n  let highest = values[0]\n  for (let i = 1; i < values.length; i++) {\n    const value = values[i]\n    if (JSBI.GT(value, highest)) {\n      highest = value\n    }\n  }\n  return highest\n}\n\nexport function difference(a: JSBI, b: JSBI): JSBI {\n  if (JSBI.greaterThan(a, b)) {\n    return JSBI.subtract(a, b)\n  }\n  return JSBI.subtract(b, a)\n}\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import JSBI from 'jsbi'\nimport { Currency } from '../entities/currency'\nimport { CurrencyAmount } from '../entities/fractions/currencyAmount'\nimport { Rebase } from '../interfaces'\n\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : JSBI.BigInt(0)\n}\n\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\n  let elastic: JSBI\n  if (JSBI.equal(total.base, JSBI.BigInt(0))) {\n    elastic = base\n  } else {\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\n      elastic = JSBI.add(elastic, JSBI.BigInt(1))\n    }\n  }\n\n  return elastic\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nexport function toAmount(token: Rebase, shares: JSBI): JSBI {\n  return JSBI.GT(token.base, 0) ? JSBI.divide(JSBI.multiply(shares, token.elastic), token.base) : JSBI.BigInt(0)\n}\n\nexport function toShare(token: Rebase, amount: JSBI): JSBI {\n  return JSBI.GT(token.elastic, 0) ? JSBI.divide(JSBI.multiply(amount, token.base), token.elastic) : JSBI.BigInt(0)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SUSHI_ADDRESS","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","ARBITRUM_KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM_ONE","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","USDC_ADDRESS","OPTIMISM","USD_ADDRESS","WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","DAI_ADDRESS","USDT_ADDRESS","MIM_ADDRESS","FRAX_ADDRESS","FACTORY_ADDRESS","ROUTER_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","MULTISIG_ADDRESS","MaxUint256","JSBI","BigInt","validateAndParseAddress","address","getAddress","error","Error","BaseCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","Token","_this","_inheritsLoose","_proto","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","USD","WETH9","WNATIVE","SUSHI","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","_Fraction","toExact","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","NativeCurrency","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","getSigner","library","account","connectUnchecked","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","currencyA","currencyB","a","b","highest","i","arguments","value","GT","lowest","LT","from","to","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x","token","shares","base","elastic","total","roundUp","amount"],"mappings":"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"}